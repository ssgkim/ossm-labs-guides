# Part II: Setting Up Corporate CA for Service Mesh

== Task 4 (Optional): Use a custom Certificate Authority (CA)

This section is optional and you can also use for your own understanding of the procedure to provide custom CA certs.

=== Step 1 - Create a custom CA and Intermediate CA Cert

Firstly you will create a custom CA and then with it an Intermediate CA (normally these will be provided).

* You must be in the directory of *_lab-5_* and provide to the following script the full path for this directory in your local system:
+
[source,shell,subs=attributes,role=execute]
----
./create-corporate-intermediate-certs.sh /YOUR-PATH/lab-5
----

* Follow the above scripts output and in the _verification_ parts verify that:
** a) The 2 `openssl.cnf` files have been created correctly with *`dir`* variable the path you provided:
** b) `4a-index.txt` has content
+
----
V	330421081250Z		1000	unknown	/C=GB/ST=England/O=Travel Agency Ltd/OU=Intermmediate Certificate Authority/CN=www.travelagency.com/emailAddress=ca@www.travelagency.com
----
** c) _Verify the intermediate certificate_ has
*** Issuer the custom _Certificate Authority_:
+
----
Issuer: C = GB, ST = England, L = London, O = Travel Agency Ltd, OU = Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com
----
*** Subject is the _Intermediate Certificate Authority_:
+
----
Subject: C = GB, ST = England, O = Travel Agency Ltd, OU = Intermediate Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com
----

=== Step 2 - Verify the current controlplane and dataplane used certificates

The current _controlplane_ and _dataplane_ certificates are issued by default `Issuer: O = cluster.local`. Verify this with the following commands:

* Check the issuer of the default service mesh certificate (it should be something like `Issuer: O = cluster.local`)
+
[source,shell,subs=attributes,role=execute]
----
./login-as.sh emma
oc get -o yaml secret istio-ca-secret -n {openshift_cluster_user_name}-prod-istio-system | grep ca-cert | awk '{print $2}' | base64 -d | openssl x509 -noout -text
----

* Check the certificates used in the communication with `istiod`, the Issuer is again `Issuer=O = cluster.local`
+
[source,shell,subs=attributes,role=execute]
----
oc exec "$(oc get pod -l app=istio-ingressgateway -n {openshift_cluster_user_name}-prod-istio-system -o jsonpath={.items..metadata.name} | awk '{print $1}')" -c istio-proxy -n {openshift_cluster_user_name}-prod-istio-system -- openssl s_client -showcerts -connect $(oc get svc istiod-{openshift_cluster_user_name}-production -o jsonpath={.spec.clusterIP}):15012
----

* Checking the certificates used in the POD to POD communications, the Issuer is again `Issuer=O = cluster.local`
+
[source,shell,subs=attributes,role=execute]
----
oc exec "$(oc get pod -l app=travels -n {openshift_cluster_user_name}-prod-travel-agency -o jsonpath={.items..metadata.name})" -c istio-proxy -n {openshift_cluster_user_name}-prod-travel-agency -- openssl s_client -showcerts -connect $(oc -n {openshift_cluster_user_name}-prod-travel-agency get svc cars -o jsonpath={.spec.clusterIP}):8000
----

=== Step 3: Modify the `production` SMCP tenant to use the corporate based CA, Intermediate CA and chain certificates

The link:https://docs.openshift.com/container-platform/4.12/service_mesh/v2x/ossm-security.html#ossm-cert-manage-add-cert-key_ossm-security[documentation,window=_blank] instructs to create a secret named `cacert` that includes the input files `ca-cert.pem`, `ca-key.pem`, `root-cert.pem` and `cert-chain.pem`. Based on the files you generated the equivalent are:

* `intermediate.cert.pem` (`ca-cert.pem`). the certificate for the intermediate ca
* `intermediate.key.pem` (`ca-key.pem`). the key for the intermediate ca certificate
* `ca.cert.pem` (`root-cert.pem`): the root ca certificate
* `ca-chain.cert.pem` (`cert-chain.pem`)the certificate chain that includes both certificates
+
[source,shell,subs=attributes,role=execute]
----
oc create secret generic cacerts -n {openshift_cluster_user_name}-prod-istio-system \
--from-file=ca-cert.pem=certs-resources/intermediate/certs/intermediate.cert.pem \
--from-file=ca-key.pem=certs-resources/intermediate/private/intermediate.key.pem \
--from-file=root-cert.pem=certs-resources/certs/ca.cert.pem \
--from-file=cert-chain.pem=certs-resources/intermediate/certs/ca-chain.cert.pem
----

* Remove the `istio-system-ca` secret created as default CA by OSSM as it interferes with the istiod correctly picking the enterprise certificates from the newly created `cacerts` secret
+
[source,shell,subs=attributes,role=execute]
----
oc get  secret istio-ca-secret -n {openshift_cluster_user_name}-prod-istio-system -o yaml > istio-ca-secret-default.yaml
oc delete secret istio-ca-secret -n {openshift_cluster_user_name}-prod-istio-system
----

* Logged in as `Mesh Operator` (credentials `emma`/`emma`) add to the `ServiceMeshControlPlane` resource `{openshift_cluster_user_name}-production` under `security` section the `certificateAuthority` properties as shown in the following example (make sure the indentation is correct). Service Mesh reads the certificates and key from the secret-mount files.
+
[source,shell,subs=attributes,role=execute]
----
./login-as.sh emma
oc edit smcp/{openshift_cluster_user_name}-production -n {openshift_cluster_user_name}-prod-istio-system
----
+
Edit the file as follows:
+
[source,yaml,subs=attributes]
----
# Add in production SMCP under the existing _security_ section the followng:

  security:
    certificateAuthority:
      type: Istiod
      istiod:
        type: PrivateKey
        privateKey:
          rootCADir: /etc/cacerts
----

* Restart _controlplane_ and _dataplane_ resources to force new certificate utilization
** After adding the corporate the certificates, the control plane istiod and gateway pods must be restarted so the changes go into effect. Use the following command to restart the pods(The Operator will automatically recreate the pods after they have been deleted):
+
[source,shell,subs=attributes,role=execute]
----
oc -n {openshift_cluster_user_name}-prod-istio-system delete pods -l "app in (istiod,istio-ingressgateway, istio-egressgateway,gto-{openshift_cluster_user_name}-ingressgateway)"
oc -n {openshift_cluster_user_name}-prod-istio-system get pods
----
** Restart the _dataplane_ pods to expedite the sidecar proxies picking up the secret changes.
+
[source,shell,subs=attributes,role=execute]
----
oc -n {openshift_cluster_user_name}-prod-travel-control delete pods --all
oc -n {openshift_cluster_user_name}-prod-travel-agency delete pods --all
oc -n {openshift_cluster_user_name}-prod-travel-portal delete pods --all
----


* Finally, perform some verifications of the new certificates being in effect
** Identify the `cacerts` Issuer (it should be `C = GB, ST = England, L = London, O = Travel Agency Ltd, OU = Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com`)
+
[source,shell,subs=attributes,role=execute]
----
oc get -o yaml secret cacerts -n {openshift_cluster_user_name}-prod-istio-system | grep ca-cert | awk '{print $2}' | base64 -d | openssl x509 -noout -text
----
** Verify the _dataplane_ communications are secured with the new corporate certificates
+
[source,shell,subs=attributes,role=execute]
----
./login-as.sh emma
./verify-dataplane-certs.sh {openshift_cluster_user_name}
----
+
[source,shell]
----

###########################
 CERTS CHECK ON DATAPLANE
###########################

1. Wait 20 seconds for the mTLS policy to take effect before retrieving the certificate chain of cars POD. As the CA certificate used in this example is self-signed, the verify error:num=19:self signed certificate in certificate chain error returned by the openssl command is expected.
------------------------------------------------------
Can't use SSL_get_servername
depth=2 C = GB, ST = England, L = London, O = Travel Agency Ltd, OU = Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com
verify error:num=19:self signed certificate in certificate chain
verify return:1
depth=2 C = GB, ST = England, L = London, O = Travel Agency Ltd, OU = Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com
verify return:1
depth=1 C = GB, ST = England, O = Travel Agency Ltd, OU = Intermediate Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com
verify return:1
depth=0
verify return:1
DONE

2. Parse the certificates on the certificate chain.
------------------------------------------------------

3. Verify the root certificate used in the POD handshake is the same as the one specified by the OSSM administrator:
------------------------------------------------------
Files /tmp/root-cert.crt.txt and /tmp/pod-root-cert.crt.txt are identical

4. Verify the Intermediate CA certificate used in the POD handshake is the same as the one specified by the OSSM administrator:
------------------------------------------------------
Files /tmp/ca-cert.crt.txt and /tmp/pod-cert-chain-ca.crt.txt are identical

5. Verify the certificate chain from the root certificate to the workload certificate:
------------------------------------------------------
./proxy-cert-1.pem: OK
----

** Verify the _controlplane_ communications are secured with the new corporate certificates
+
[source,shell,subs=attributes,role=execute]
----
./verify-controlplane-certs.sh {openshift_cluster_user_name}
----
+
[source,shell,subs=attributes]
----
###########################
CERTS CHECK ON CONTROLPLANE
###########################

1. Get the ceritificates used between istio-ingressgateway and istiod
Can't use SSL_get_servername
depth=2 C = GB, ST = England, L = London, O = Travel Agency Ltd, OU = Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com
verify error:num=19:self signed certificate in certificate chain
verify return:1
depth=2 C = GB, ST = England, L = London, O = Travel Agency Ltd, OU = Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com
verify return:1
depth=1 C = GB, ST = England, O = Travel Agency Ltd, OU = Intermediate Certificate Authority, CN = www.travelagency.com, emailAddress = ca@www.travelagency.com
verify return:1
depth=0
verify return:1
DONE

2. Verify the root certificate used in the istiod handshake is the same as the one specified by the OSSM administrator:
------------------------------------------------------
Files /tmp/root-cert.crt.txt and /tmp/pod-root-cp-cert.crt.txt are identical

4. Verify the Intermediate CA certificate used in the istiod handshake is the same as the one specified by the OSSM administrator:
------------------------------------------------------
Files /tmp/ca-cert.crt.txt and /tmp/pod-cert-cp-chain-ca.crt.txt are identical

5. Verify the certificate chain from the root certificate to the workload certificate:
------------------------------------------------------
./proxy-cp-cert-1.pem: OK
----
